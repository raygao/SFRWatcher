################################################################################
# Project SFRWatcher: A Salesforce Chatter Externalization Tool                #
# Copyright Â© 2010 Raymond Gao / http://Appfactory.Are4.us                     #
# Demo app running on http://parl8-vo.us:3000/                                 #
################################################################################

Overview
--------
Project SFRWatcher is a (WebBased) Salesforce Chatter Externalization Tool.
It facilitates the reading and the posting to Chatter.
1. FeedPosts (Text, URL, and file attachment)
2. Comments

Since Chatter specifies two types of Feeds
1. EntityFeeds - People or entities (groups, accounts) that you are following
2. NewsFeed - News that are generated by you.
This tool provides those two tabs.

Furthermore, this tool allows you to edit Salesforce Data, just like SFExplorer (pc) or
SOQLExplorer (mac). My app follows the SF security model, meaning that things
you cannot edit are marked with red labels.
Read "Salesforce_objects_controller.rb" for details.

Technically, it demonstrates how to call.
1. SOQL (Salesforce Object Query Language);
2. SOSL (Salesforce Object Search Language).
It is a pure RubyOnRails app. And, it does not require you downloading Partner.WSDL
or Enterprise.WSDL to generate the stub class. This is a big advantage over the
Java and C# model apps explained in the Salesforce Web Services Dev Guide.

The baseline technologies are ActiveSalesforceAdapter (ActiveRecord Adapter) and
RForce (used by the adapter, for sending and receiving SOAP requests).

Prerequisites
-------------
1. RubyOnRails (2.3.5 or higher)
2. Hobo (for visual templating)
3. Updated version of the ActiveSalesforce-Adapter (with LIMIT keyword enabled
and using Salesforce WSDL 19.0)
Read "environment.rb" for detail.
4. MySQL database

Installation
------------
1. Download this app.
2. Install RubyOnRails and MYSQL DB
3. Install the required Gems with the following command
    $ sudo rake gems:install
4. update the ActiveSalesforce-adapter.
    the APPROOT/"lib/asf/" directory contains the updated Gem files. They should
    be used to replace what was installed by the GEM.
    Really, the only file that was updated by me is the:
    "lib/asf/active_record/connection_adapters/activesalesforce_adapter.rb" file,
    which brings the SOAP version to 19.0 and adds support for LIMIT keyword and
    fixes for a few issues.
    Normally, on Mac the gem is installed "/Library/Ruby/Gems/1.8/gems". You need
    to find the corresponding folder "althor880-activerecord-activesalesforce-adapter-2.3.7/".
    And, replace the files from my offering (see above).
5. Create the database.
    a. update the 'database.yml' file, this is where you add the MYSQL DB name+password
        as well as your baseline Salesforce username & password+security_token.
        (salesforce-default-realm)
        With those in place, you can create the database. Depending how you installed
        MYSQL db. It maybe as simple as running the following commands.
        $ rake db:create:all
        $ rake db:migrate
    b. run the test. And, all test should pass. With AccountTest, update the "test_keys.rb" file
        for RForce settings. Of course, username + password can be retrieved from
        'database.yml'. But, I leave it as an extra credit for people. :-)

6. Fire up the server and enjoy.
    $script/server
7. Go To http://localhost:3000   and you should be able to create an admin account.
8. Don't forget to update the 'environment.rb', if you have an e-mail server. This app
support follow-up email after a new user registers.

Dev Environment
---------------
Furthermore, this project was constructed with the NetBeans IDE. This allows you
to edit project with a GUI tool and debug it. Additionally, Ruby is a very flexible language.
That means my app will run on Mac, PC, or Unix with zero change.

Further Comments
----------------
While ROR is a great environment for building web app, it has a crucial drawback:
It is single threaded. So, if you are going to use Mongrel, I have already gotten
a clustering script written. Contact me if you really need it. Otherwise, with
some minor updates, this app can be running on JRuby. Yes, it can run within an
application server, e.g. GlassFish, WebLogic, or any other application server.

License
-------
I am a big believer in open-source technology. That is why I chose Ruby over
Java and C# for this project. I am providing this app as it is without any warranty
(Hey, I need to protect myself against any lawsuits. This is a funny world. Any
mishap may happen to a good guy.) To keep the true open spirit, I am following the
Apache 2.0 license license. (See enclosed license.txt or see it online @
http://www.apache.org/licenses/LICENSE-2.0.html) Basically, it reads you are granted
a perpetual royalty free license to use this app. But, you need to keep the
license file with the app at all time and to credit the original design to me if you
intend to develop derivative works.

Now have fun in exploring Salesforce.


   Copyright 2010 Raymond Gao (for Are4.us)

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.